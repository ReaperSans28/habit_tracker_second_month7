"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_habit_actions_keyboard(habit_id: int):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∏–≤—ã—á–∫–æ–π (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ / –ø—Ä–æ–ø—É—â–µ–Ω–æ / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –≤ callback_data
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"habit_done_{habit_id}")
    builder.button(text="‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"habit_skip_{habit_id}")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"habit_edit_{habit_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"habit_delete_{habit_id}")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"habit_stats_{habit_id}")

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏: 2 + 2 + 1
    builder.adjust(2, 2, 1)

    return builder.as_markup()

def back():
    back = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="back")]
    ])
    return back


def get_confirmation_keyboard(action: str, item_id: int = None):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è (–î–∞ / –ù–µ—Ç)
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{item_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}_{item_id}")]
        ]
    )
    return keyboard



def get_habit_list_keyboard(habits=None):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫.
    habits: —Å–ø–∏—Å–æ–∫ –ª–∏–±–æ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name), –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–≤—ã—á–µ–∫.
    """
    if not habits:
        habits = ["–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç", "–ü–∏—Ç—å –≤–æ–¥—É 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤ –¥–µ–Ω—å"]

    keyboard_buttons = []

    for idx, item in enumerate(habits):
        # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî –∫–æ—Ä—Ç–µ–∂ (id, name)
        if isinstance(item, tuple) and len(item) >= 2:
            habit_id, habit_name = item[:2]
        else:  # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
            habit_id, habit_name = idx, str(item)

        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìù {habit_name}",
                callback_data=f"select_habit_{habit_id}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_new_habit")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)



