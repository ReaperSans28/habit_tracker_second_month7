"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import requests
import random
from bs4 import BeautifulSoup
import keyboards.inline as kb
import database.database as db
from config import QUOTES_URL


commands_router = Router()

# ==============================
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
# ==============================
class AddHabit(StatesGroup):
    name = State()
    description = State()


# ==============================
# /start
# ==============================
@commands_router.message(Command("start"))
async def cmd_start(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_id = db.add_user_if_not_exists(telegram_id, username, first_name, last_name)

    habits = db.get_habits(user_id)

    if not habits:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /addhabbit üí™"
        )
    else:
        habit_id = habits[0][0]
        habit_name = habits[0][2]
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
            f"–¢–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞: {habit_name}\n"
            "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ üëá",
            reply_markup=kb.get_habit_actions_keyboard(habit_id)
        )


# ==============================
# /add ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
# ==============================
@commands_router.message(Command("addhabbit"))
async def cmd_add(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    user_id = db.add_user_if_not_exists(telegram_id, username, first_name, last_name)
    habits = db.get_habits(user_id)

    await message.answer("üìù –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É:", reply_markup=kb.get_habit_list_keyboard(habits))


# ==============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
# ==============================
@commands_router.callback_query(F.data.startswith("mark_done_"))
async def mark_done(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[2])
    db.mark_habit(habit_id, "done")
    await callback.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")


@commands_router.callback_query(F.data.startswith("delete_habit_"))
async def delete_habit(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[2])
    db.delete_habit(habit_id)
    await callback.message.edit_text("üóë –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")


@commands_router.callback_query(F.data.startswith("stats_"))
async def stats(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    count = db.get_habit_stats(habit_id)
    await callback.answer(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {count} —Ä–∞–∑!", show_alert=True)


# ==============================
# /help ‚Äî –ø–æ–º–æ—â—å
# ==============================
@commands_router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n\n"
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/addhabbit ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/quotes ‚Äî –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã üí¨"
        "/myhabits ‚Äî –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"
    )
    

# ==============================
# /my_habits ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏
# ==============================
@commands_router.message(Command("myhabits"))
async def show_user_habits(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    user = db.get_user(telegram_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
        return
    
    user_id = user[0]
    habits = db.get_habits(user_id)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(id, name), ...]
    
    if not habits:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /add_habit")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–≤—ã—á–µ–∫
    habit_names = [h[1] for h in habits]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
    keyboard = kb.get_habit_list_keyboard(habit_names)

    await message.answer("–í–æ—Ç —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=keyboard)


# ==============================
# /quotes ‚Äî —Ü–∏—Ç–∞—Ç—ã
# ==============================
@commands_router.message(Command("quotes"))
async def cmd_quote(message: Message):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(QUOTES_URL, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')
        quotes = soup.find_all('div', class_='field-name-body')

        quote_texts = []
        for quote in quotes:
            for p in quote.find_all('p'):
                text = p.get_text(strip=True)
                if len(text) > 10:
                    quote_texts.append(text)

        if not quote_texts:
            await message.answer("–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòû")
            return

        random_quote = random.choice(quote_texts)
        await message.answer(f"üí¨ {random_quote}")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç.")
        print(e)