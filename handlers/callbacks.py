"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards.inline import get_habit_actions_keyboard, get_confirmation_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
callback_router = Router()


@callback_router.callback_query(F.data.startswith("habit_done_"))
async def handle_habit_done(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ #{habit_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n\n"
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéâ"
    )


@callback_router.callback_query(F.data.startswith("habit_skip_"))
async def handle_habit_skip(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    await callback.message.edit_text(
        f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ #{habit_id} –ø—Ä–æ–ø—É—â–µ–Ω–∞.\n\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! üí™"
    )


@callback_router.callback_query(F.data.startswith("habit_edit_"))
async def handle_habit_edit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ #{habit_id}\n\n"
        "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö."
    )


@callback_router.callback_query(F.data.startswith("habit_delete_"))
async def handle_habit_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏")
    await callback.message.edit_text(
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ #{habit_id}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?",
        reply_markup=get_confirmation_keyboard("delete", habit_id)
    )


@callback_router.callback_query(F.data.startswith("habit_stats_"))
async def handle_habit_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏")
    await callback.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏ #{habit_id}\n\n"
        "–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö."
    )


@callback_router.callback_query(F.data.startswith("select_habit_"))
async def handle_select_habit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_index = callback.data.split("_")[-1]
    
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ #{habit_index}")
    await callback.message.edit_text(
        f"üìù –ü—Ä–∏–≤—ã—á–∫–∞ #{habit_index}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_habit_actions_keyboard(habit_index)
    )


@callback_router.callback_query(F.data == "add_new_habit")
async def handle_add_new_habit(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    await callback.answer("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏")
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å' –∏–ª–∏ '–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
    )


@callback_router.callback_query(F.data.startswith("confirm_"))
async def handle_confirmation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    action = callback.data.split("_")[1]
    item_id = callback.data.split("_")[2]
    
    if action == "delete":
        await callback.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ #{item_id} —É–¥–∞–ª–µ–Ω–∞.\n\n"
            "–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞."
        )


@callback_router.callback_query(F.data.startswith("cancel_"))
async def handle_cancellation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    action = callback.data.split("_")[1]
    item_id = callback.data.split("_")[2]
    
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@callback_router.callback_query(F.data.startswith("reminder_done_"))
async def handle_reminder_done(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await callback.message.edit_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ #{habit_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéâ"
    )


@callback_router.callback_query(F.data.startswith("reminder_later_"))
async def handle_reminder_later(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 1 —á–∞—Å")
    await callback.message.edit_text(
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 1 —á–∞—Å.\n\n"
        "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
    )


@callback_router.callback_query(F.data.startswith("reminder_skip_"))
async def handle_reminder_skip(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    habit_id = callback.data.split("_")[-1]
    
    await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    await callback.message.edit_text(
        f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n\n"
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! üí™"
    )
