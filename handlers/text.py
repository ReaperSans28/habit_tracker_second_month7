"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from aiogram import Router, F
from aiogram.types import Message
from utils.text_parser import text_parser
from utils.date_parser import date_parser
from utils.calendar_integration import calendar_integration

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
text_router = Router()


@text_router.message(F.text == "üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def show_habits(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    habits_text = (
        "üìä –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏."
    )
    await message.answer(habits_text)


@text_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def add_habit_start(message: Message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    add_text = (
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å' –∏–ª–∏ '–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É'"
    )
    await message.answer(add_text)


@text_router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–µ–∫"""
    stats_text = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å!"
    )
    await message.answer(stats_text)


@text_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    )
    await message.answer(settings_text)


@text_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = (
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await message.answer(help_text)


@text_router.message(F.text.startswith("üìÖ"))
async def handle_date_parsing(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
    text = message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    
    if not text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    parsed_date = date_parser.parse_date(text)
    
    if parsed_date:
        is_valid, error = date_parser.validate_date(parsed_date)
        
        if is_valid:
            formatted_date = date_parser.format_date(parsed_date)
            relative_date = date_parser.get_relative_date(parsed_date)
            
            response_text = (
                f"üìÖ –î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!\n\n"
                f"üìÜ –§–æ—Ä–º–∞—Ç: {formatted_date}\n"
                f"üìù –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ: {relative_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {parsed_date.strftime('%H:%M')}"
            )
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}"
    else:
        response_text = (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –≤—á–µ—Ä–∞\n"
            "‚Ä¢ 25.12.2024\n"
            "‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è"
        )
    
    await message.answer(response_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
@text_router.message()
async def handle_habit_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(message.text) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if len(message.text) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ã—á–∫–∏
    parsed_data = text_parser.parse_habit_text(message.text)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    response_parts = [f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: {parsed_data['name']}"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–æ—Ç–µ
    if parsed_data['frequency']:
        freq = parsed_data['frequency']
        if freq['type'] == 'daily':
            if freq['interval'] == 1:
                response_parts.append("üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
            else:
                response_parts.append(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {freq['interval']} –¥–Ω–µ–π")
        elif freq['type'] == 'weekly':
            if freq['interval'] == 1:
                response_parts.append("üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é")
            else:
                response_parts.append(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {freq['interval']} –Ω–µ–¥–µ–ª—å")
        elif freq['type'] == 'monthly':
            if freq['interval'] == 1:
                response_parts.append("üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü")
            else:
                response_parts.append(f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {freq['interval']} –º–µ—Å—è—Ü–µ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    if parsed_data['time']:
        time_info = parsed_data['time']
        time_str = f"{time_info['hour']:02d}:{time_info['minute']:02d}"
        response_parts.append(f"‚è∞ –í—Ä–µ–º—è: {time_str}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if parsed_data['duration']:
        duration = parsed_data['duration']
        if duration['unit'] == 'minutes':
            response_parts.append(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration['value']} –º–∏–Ω.")
        elif duration['unit'] == 'hours':
            response_parts.append(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration['value']} —á.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö
    if parsed_data['dates']:
        dates_str = ", ".join([date_parser.format_date(date) for date in parsed_data['dates']])
        response_parts.append(f"üìÖ –î–∞—Ç—ã: {dates_str}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
    if parsed_data['reminder']:
        response_parts.append("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if parsed_data['errors']:
        response_parts.append(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏: {', '.join(parsed_data['errors'])}")
    
    response_text = "\n".join(response_parts)
    await message.answer(response_text)
