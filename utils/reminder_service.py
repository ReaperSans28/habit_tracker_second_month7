"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import asyncio
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_reminders = {}
        self.reminder_tasks = {}
    
    async def schedule_reminder(self, user_id: int, habit_name: str, 
                              reminder_time: datetime, habit_id: str = None):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ
        """
        reminder_id = f"{user_id}_{habit_id}_{reminder_time.timestamp()}"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        delay = (reminder_time - datetime.now()).total_seconds()
        
        if delay <= 0:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        task = asyncio.create_task(
            self._send_reminder(user_id, habit_name, habit_id, delay)
        )
        
        self.reminder_tasks[reminder_id] = task
        self.active_reminders[reminder_id] = {
            'user_id': user_id,
            'habit_name': habit_name,
            'habit_id': habit_id,
            'reminder_time': reminder_time
        }
        
        return True
    
    async def _send_reminder(self, user_id: int, habit_name: str, 
                           habit_id: str, delay: float):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await asyncio.sleep(delay)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                            callback_data=f"reminder_done_{habit_id}"
                        ),
                        InlineKeyboardButton(
                            text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", 
                            callback_data=f"reminder_later_{habit_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", 
                            callback_data=f"reminder_skip_{habit_id}"
                        )
                    ]
                ]
            )
            
            reminder_text = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ\n\n"
                f"üìù {habit_name}\n\n"
                f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É! üí™"
            )
            
            await self.bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            reminder_id = f"{user_id}_{habit_id}_{datetime.now().timestamp()}"
            self.reminder_tasks.pop(reminder_id, None)
            self.active_reminders.pop(reminder_id, None)
    
    def cancel_reminder(self, user_id: int, habit_id: str):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        """
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        for reminder_id, task in self.reminder_tasks.items():
            if (reminder_id.startswith(f"{user_id}_{habit_id}") and 
                not task.done()):
                task.cancel()
                del self.reminder_tasks[reminder_id]
                del self.active_reminders[reminder_id]
                return True
        
        return False
    
    def get_user_reminders(self, user_id: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_reminders = []
        for reminder_id, reminder_data in self.active_reminders.items():
            if reminder_data['user_id'] == user_id:
                user_reminders.append({
                    'reminder_id': reminder_id,
                    **reminder_data
                })
        
        return user_reminders
    
    def cancel_all_user_reminders(self, user_id: int):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        cancelled_count = 0
        for reminder_id, task in list(self.reminder_tasks.items()):
            if (reminder_id.startswith(f"{user_id}_") and not task.done()):
                task.cancel()
                del self.reminder_tasks[reminder_id]
                del self.active_reminders[reminder_id]
                cancelled_count += 1
        
        return cancelled_count
    
    async def schedule_daily_reminders(self, user_id: int, habits: List[Dict]):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        current_time = datetime.now()
        
        for habit in habits:
            if not habit.get('reminder_enabled', False):
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_time = self._get_reminder_time(habit, current_time)
            if reminder_time:
                await self.schedule_reminder(
                    user_id=user_id,
                    habit_name=habit['name'],
                    reminder_time=reminder_time,
                    habit_id=habit.get('id', 'unknown')
                )
    
    def _get_reminder_time(self, habit: Dict, current_time: datetime) -> Optional[datetime]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏
        """
        if not habit.get('reminder_time'):
            return None
        
        reminder_time = habit['reminder_time']
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if reminder_time <= current_time:
            return reminder_time + timedelta(days=1)
        
        return reminder_time
    
    def get_reminder_stats(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_reminders = self.get_user_reminders(user_id)
        
        return {
            'active_reminders': len(user_reminders),
            'total_reminders': len(self.active_reminders),
            'user_reminders': user_reminders
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_service = None

def init_reminder_service(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_service
    reminder_service = ReminderService(bot)
    return reminder_service

def get_reminder_service() -> Optional[ReminderService]:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    return reminder_service
